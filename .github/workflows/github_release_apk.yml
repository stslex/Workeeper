name: Release Github APK

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag to create the release from (e.g., release-v1.2.3)"
        required: false
        type: string
  push:
    tags:
      - "release-*"

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref || inputs.tag_name }}
  cancel-in-progress: false

jobs:
  build-and-release:
    name: Build and Publish Release APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Prepare signing keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" > keystore.jks.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch keystore.jks.asc > keystore.jks

      - name: Configure keystore.properties
        env:
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        run: |
          echo "storeFile=keystore.jks" >> keystore.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> keystore.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> keystore.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> keystore.properties

      - name: Provision google-services.json (store)
        env:
          GOOGLE_SERVICES_JSON_STORE: ${{ secrets.GOOGLE_SERVICES_JSON_STORE }}
        run: |
          echo "$GOOGLE_SERVICES_JSON_STORE" > app/store/google-services.json.b64
          base64 -d -i app/store/google-services.json.b64 > app/store/google-services.json

      - name: Assemble store release
        run: ./gradlew :app:store:assembleRelease --stacktrace

      - name: Collect APK path
        id: collect_apk
        run: |
          APK_PATH=$(find app/store/build/outputs/apk/release -type f -name "*.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "No APK found in build outputs" >&2
            exit 1
          fi
          echo "apk_path=$APK_PATH" >> "$GITHUB_OUTPUT"

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: store-release-apk
          path: ${{ steps.collect_apk.outputs.apk_path }}

      - name: Build changelog (mikepenz)
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: .github/changelog-config.json
          failOnError: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive release tag
        id: tag
        shell: bash
        run: |
          if [ -n "${{ inputs.tag_name }}" ]; then
            TAG="${{ inputs.tag_name }}"
          else
            if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              TAG="${GITHUB_REF#refs/tags/}"
            else
              TAG=""
            fi
          fi
          TAG=$(echo "$TAG" | tr -d ' \t\n\r')
          if [ -z "$TAG" ]; then
            TAG="release-${GITHUB_SHA::7}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release and upload APK
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.tag }}
          target_commitish: ${{ github.sha }}
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, 'alpha') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'rc') }}
          body: ${{ steps.changelog.outputs.changelog || 'Changelog not available.' }}
          files: |
            ${{ steps.collect_apk.outputs.apk_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
